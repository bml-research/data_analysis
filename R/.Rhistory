# loading data
file_path_ex1 <- "./files_13_data_visualization_exercises/exercise01/expression_data.csv"
df_ex1 <- read_tsv(file_path_ex1)
formatted_table(head(df_ex1))
df_ex1
# loading data
file_path_ex1 <- "./files_13_data_visualization_exercises/exercise01/expression_data.csv"
df_ex1 <- read_tsv(file_path_ex1)
formatted_table(head(df_ex1))
# extract relevant data: Expression value > 0.5
nuc_rec_fam <- df_ex1[df_ex1$`Gene Family` == "MAP Kinase" & df_ex1$`Expression Value - stimulus` > 0.5, ]
# sort on column `Expression Value - stimulus`
nuc_new <- arrange(nuc_rec_fam, `Expression Value - stimulus`)
# plot graph
barplot(nuc_new$`Expression Value - stimulus`,
ylab = "Total Global Average GHG Emissions per kg",
ylim = c(0, 1),
names = nuc_new$`Gene name`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "MAP kinase Expression values - stimulus > 0.5")
library("tidyverse")
library(kableExtra)
formatted_table <- function(df){
kbl(df) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
}
# loading data
file_path_ex1 <- "./files_13_data_visualization_exercises/exercise01/expression_data.csv"
df_ex1 <- read_tsv(file_path_ex1)
formatted_table(head(df_ex1))
# extract relevant data: Expression value > 0.5
nuc_rec_fam <- df_ex1[df_ex1$`Gene Family` == "MAP Kinase" & df_ex1$`Expression Value - stimulus` > 0.5, ]
# sort on column `Expression Value - stimulus`
nuc_new <- arrange(nuc_rec_fam, `Expression Value - stimulus`)
# plot graph
barplot(nuc_new$`Expression Value - stimulus`,
ylab = "Total Global Average GHG Emissions per kg",
ylim = c(0, 1),
names = nuc_new$`Gene name`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "MAP kinase Expression values - stimulus > 0.5")
# extract relevant data: Expression value > 0.5
nuc_rec_fam <- df_ex1[df_ex1$`Gene Family` == "MAP Kinase" & df_ex1$`Expression Value - stimulus` > 0.5, ]
# sort on column `Expression Value - stimulus`
nuc_new <- arrange(nuc_rec_fam, `Expression Value - stimulus`)
# plot graph
barplot(nuc_new$`Expression Value - stimulus`,
ylab = "Relative Expression Value",
ylim = c(0, 1),
names = nuc_new$`Gene name`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "MAP kinase Expression values - stimulus > 0.5")
df_ex3 <- df_ex1[str_detect(df_ex1$`Gene Family`, "MAP Kinase"), ]
formatted_table(df_ex3)
tidy_df_ex3 <- df_ex3 %>%
pivot_longer(c(`Expression Value - stimulus`, `Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value")
formatted_table(head(tidy_df_ex3))
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=8))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=6))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="stack") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="stack") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=6))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=6))
p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
# plot the (tidy) data
p <- ggplot(tidy_df_ex5, aes(x = "", y = `Expression Value`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() # remove background, grid, numeric labels
p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
# Calculate the percentages and add to new column:
tidy_df_ex5$percentage <- tidy_df_ex5$`Expression Value` / sum(tidy_df_ex5$`Expression Value`) * 100
# plot the (tidy) data
p <- ggplot(tidy_df_ex5, aes(x = "", y = `Expression Value`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() + # remove background, grid, numeric labels
geom_text(aes(label = paste0(round(percentage, 0), "%")), position = position_stack(vjust = 0.5), size = 3)
p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
# plot the (tidy) data
p <- ggplot(tidy_df_ex5, aes(x = "", y = `Expression Value`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() # remove background, grid, numeric labels
p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
pivot_longer(c(`Expression Value - stimulus`, `Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
tidy_df_ex5
# plot the (tidy) data
p <- ggplot(tidy_df_ex5, aes(x = "", y = `Expression Value`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() # remove background, grid, numeric labels
#p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
pivot_longer(c(`Expression Value - stimulus`, `Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
tidy_df_ex5
# plot the (tidy) data
p <- ggplot(tidy_df_ex5, aes(x = "", y = `Expression Value`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() # remove background, grid, numeric labels
p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
pivot_longer(c(`Expression Value - stimulus`, `Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
tidy_df_ex5
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(everything()), mean)
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(everything()), list=(mean))
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(everything()), list=(c(mean))
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(everything()), list=(c(mean)))
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(`Expression Value`), list=(c(mean)))
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(`Expression Value`), list=(c(sum)))
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(across(`Expression Value`), sum)
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(by_category, sum_expression = sum(`Expression Value`))
tidy_df_ex5 %>%
group_by(Category) %>%
summarize(sum_expression = sum(`Expression Value`))
data_pie <- tidy_df_ex5 %>%
group_by(Category) %>%
summarize(sum_expression = sum(`Expression Value`))
p <- ggplot(data_pie, aes(x = "", y = `Expression Value`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() # remove background, grid, numeric labels
p
data_pie <- tidy_df_ex5 %>%
group_by(Category) %>%
summarize(sum_expression = sum(`Expression Value`))
data_pie <- tidy_df_ex5 %>%
group_by(Category) %>%
summarize(sum_expression = sum(`Expression Value`))
data_pie
p <- ggplot(data_pie, aes(x = "", y = `sum_expression`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() # remove background, grid, numeric labels
p
data_pie$percentage <- data_pie$`sum_expression` / sum(data_pie$`sum_expression`) * 100
formatted_table(head(data_pie))
p <- ggplot(data_pie, aes(x = "", y = `sum_expression`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() + # remove background, grid, numeric labels
geom_text(aes(label = paste0(round(percentage, 0), "%")), position = position_stack(vjust = 0.5), size = 3)
p
p <- ggplot(df_ex1, aes(x = `Category`, y = `Expression Value - stimulus`)) +
geom_boxplot() +
labs(title="Expression values - stimulus per Category") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Expression value - stimulus") +
xlab("Category")
p
# make data tidy
tidy_df_ex4 <- df_ex1 %>%
gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value")
p <- ggplot(tidy_df_ex4, aes(x = `Category`, y = `Expression Value`, fill = `Expression type`)) +
geom_boxplot() +
labs(title="Expression values without and with stimulus per Category") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Expression Value") +
xlab("Category")
p
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
formatted_table(df_ex8)
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
df_ex8 %>% rename(`...1`, `Diet`)
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
df_ex8 %>% rename(`Diet`, `...1`)
# make data tidy
tidy_df_ex4 <- df_ex1 %>%
gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value")
p <- ggplot(tidy_df_ex4, aes(x = `Category`, y = `Expression Value`, fill = `Expression type`)) +
geom_boxplot() +
labs(title="Expression values without and with stimulus per Category") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Expression Value") +
xlab("Category")
p
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
df_ex8 %>% rename(`Diet`, `...1`)
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
rename(df_ex8, Diet, ...1)
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
rename(df_ex8, `Diet` = `...1`)
formatted_table(df_ex8)
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
df_ex8 <- rename(df_ex8, `Diet` = `...1`)
formatted_table(df_ex8)
library(ggradar)
library(ggradar)
df_ex8_scaled <- df_ex8[, -1]/400
formatted_table(df_ex8_scaled)
first_col <- df_ex8[, 1]
formatted_table(first_col)
df_ex8_mod <- cbind(first_col, df_ex8_scaled)
formatted_table(df_ex8_mod)
p <- ggradar(df_ex8_mod,  legend.text.size = 8, values.radar = c("0", "200", "400"), axis.label.size = 3, grid.label.size = 3, legend.position = "right") +
labs(title = "Chick weight from different diets at day 42") +
theme(plot.title = element_text(size = 14, ))
p
file_path <- "./files_13_data_visualization_exercises/exercise09/data.csv"
df_ex9 <- read_csv(file_path)
formatted_table(head(df_ex9))
#
df_ex9$BW_squared <- sqrt(df_ex9$`Body Weight (kg)`)
df_ex9
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `BW_squared`), alpha = 0.5) +
scale_size(range = c(5, 10)) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)")
p
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `BW_squared`), alpha = 0.5) +
scale_size(range = c(5, 10)) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)")
p
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `BW_squared`), alpha = 0.5) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)") +
scale_size_area(max_size=10)
p
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `Body weight`), alpha = 0.5) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)") +
scale_size_area(max_size=10)
p
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `Body Weight (kg)`), alpha = 0.5) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)") +
scale_size_area(max_size=10)
p
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `Body Weight (kg)`), alpha = 0.5) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)") +
scale_size_area(max_size=8)
p
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `Body Weight (kg)`), alpha = 0.5) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)") +
scale_size_area(max_size=10)
p
file_path <- "./files_13_data_visualization_exercises/exercise10/puromycin.csv"
df_ex10 <- read_csv(file_path)
colnames(df_ex10) <- c("Substrate concentration (ppm)", "Rate (counts/min)", "State")
formatted_table(head(df_ex10))
df_ex10_untreated <- df_ex10 %>%
filter(State == "untreated")
formatted_table(head(df_ex10_untreated))
p <- ggplot(data= df_ex10_untreated, aes(x = `Substrate concentration (ppm)`, y = `Rate (counts/min)`)) +
geom_point() +
labs(title="Velocity of Galactosyltransferase")
p
p <- ggplot(data= df_ex10, aes(x = `Substrate concentration (ppm)`, y = `Rate (counts/min)`)) +
geom_point(aes(color = `State`)) +
labs(title="Velocity of Galactosyltransferase")
p
# make data tidy
#tidy_df_ex11 <- df_ex1 %>%
#  gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value")
formatted_table(head(df_ex1))
df_ex1_summ <- df_ex1 %>%
group_by(Category) %>%
summarize("Mean Expression Value - stimulus" = round(mean(`Expression Value - stimulus`), 3),
"Mean Expression Value + stimulus" = round(mean(`Expression Value + stimulus`), 3))
formatted_table(head(df_ex1_summ))
df_ex1_summ <- df_ex1 %>%
group_by(Category) %>%
summarize("Mean Expression Value - stimulus" = round(mean(`Expression Value - stimulus`), 3),
"Mean Expression Value + stimulus" = round(mean(`Expression Value + stimulus`), 3))
formatted_table(head(df_ex1_summ))
tidy_df_ex11 <- df_ex1_summ %>%
gather(`Mean Expression Value - stimulus`, `Mean Expression Value + stimulus`, key = "Expression type", value = "Expression Value")
formatted_table(head(tidy_df_ex11))
tidy_df_ex11 <- df_ex1_summ %>%
pivot_longer(c(`Mean Expression Value - stimulus`, `Mean Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value")
formatted_table(head(tidy_df_ex11))
p <- ggplot(data = tidy_df_ex11, aes(x = `Category`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Mean Expression Value per Category") +
coord_cartesian(ylim=c(0.45,0.53)) + # limits of the y-axis were adjusted to compare to the Excel exercise
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library("tidyverse")
library(kableExtra)
formatted_table <- function(df){
kbl(df) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
}
# loading data
file_path_ex1 <- "./files_13_data_visualization_exercises/exercise01/expression_data.csv"
df_ex1 <- read_tsv(file_path_ex1)
formatted_table(head(df_ex1))
# extract relevant data: Expression value > 0.5
nuc_rec_fam <- df_ex1[df_ex1$`Gene Family` == "MAP Kinase" & df_ex1$`Expression Value - stimulus` > 0.5, ]
# sort on column `Expression Value - stimulus`
nuc_new <- arrange(nuc_rec_fam, `Expression Value - stimulus`)
# plot graph
barplot(nuc_new$`Expression Value - stimulus`,
ylab = "Relative Expression Value",
ylim = c(0, 1),
names = nuc_new$`Gene name`,
las = 2,
cex.names = 0.5,
col = "steelblue",
main = "MAP kinase Expression values - stimulus > 0.5")
df_ex3 <- df_ex1[str_detect(df_ex1$`Gene Family`, "MAP Kinase"), ]
formatted_table(df_ex3)
tidy_df_ex3 <- df_ex3 %>%
pivot_longer(c(`Expression Value - stimulus`, `Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value")
formatted_table(head(tidy_df_ex3))
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="dodge") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=6))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="stack") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=6))
p
p <- ggplot(data = tidy_df_ex3, aes(x = `Gene name`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position="fill") +
labs(title="MAP kinase Expression values without and with stimulus") +
theme(axis.text.x = element_text(angle = 45, hjust=1, size=6))
p
# make the data tidy for a pie chart
tidy_df_ex5 <- df_ex1 %>%
pivot_longer(c(`Expression Value - stimulus`, `Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value") %>%
filter(`Expression type` == "Expression Value - stimulus")
tidy_df_ex5
data_pie <- tidy_df_ex5 %>%
group_by(Category) %>%
summarize(sum_expression = sum(`Expression Value`))
formatted_table(data_pie)
data_pie$percentage <- data_pie$`sum_expression` / sum(data_pie$`sum_expression`) * 100
formatted_table(head(data_pie))
p <- ggplot(data_pie, aes(x = "", y = `sum_expression`, fill = `Category`)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
labs(title="MAP kinase Expression values without stimulus") +
theme_void() + # remove background, grid, numeric labels
geom_text(aes(label = paste0(round(percentage, 0), "%")), position = position_stack(vjust = 0.5), size = 3)
p
p <- ggplot(df_ex1, aes(x = `Category`, y = `Expression Value - stimulus`)) +
geom_boxplot() +
labs(title="Expression values - stimulus per Category") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Expression value - stimulus") +
xlab("Category")
p
# make data tidy
tidy_df_ex4 <- df_ex1 %>%
gather(`Expression Value - stimulus`, `Expression Value + stimulus`, key = "Expression type", value = "Expression Value")
p <- ggplot(tidy_df_ex4, aes(x = `Category`, y = `Expression Value`, fill = `Expression type`)) +
geom_boxplot() +
labs(title="Expression values without and with stimulus per Category") +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
ylab("Expression Value") +
xlab("Category")
p
file_path <- "./files_13_data_visualization_exercises/exercise08/ChickWeight.csv"
df_ex8 <- read_tsv(file_path)
df_ex8 <- rename(df_ex8, `Diet` = `...1`)
formatted_table(df_ex8)
library(ggradar)
df_ex8_scaled <- df_ex8[, -1]/400
formatted_table(df_ex8_scaled)
first_col <- df_ex8[, 1]
formatted_table(first_col)
df_ex8_mod <- cbind(first_col, df_ex8_scaled)
formatted_table(df_ex8_mod)
p <- ggradar(df_ex8_mod,  legend.text.size = 8, values.radar = c("0", "200", "400"), axis.label.size = 3, grid.label.size = 3, legend.position = "right") +
labs(title = "Chick weight from different diets at day 42") +
theme(plot.title = element_text(size = 14, ))
p
file_path <- "./files_13_data_visualization_exercises/exercise09/data.csv"
df_ex9 <- read_csv(file_path)
formatted_table(head(df_ex9))
p <- ggplot(df_ex9, aes(x = `Potassium conc (mmol/L)`, y = `Sodium conc (mmol/L)`)) +
geom_point(aes(size = `Body Weight (kg)`), alpha = 0.5) +
geom_text(aes(label=Person), position = position_nudge(y = 1)) +
xlab("Potassium concentration (mg/100 g)") +
ylab("Sodium concentration (mg/100 g)") +
scale_size_area(max_size=10)
p
file_path <- "./files_13_data_visualization_exercises/exercise10/puromycin.csv"
df_ex10 <- read_csv(file_path)
colnames(df_ex10) <- c("Substrate concentration (ppm)", "Rate (counts/min)", "State")
formatted_table(head(df_ex10))
df_ex10_untreated <- df_ex10 %>%
filter(State == "untreated")
formatted_table(head(df_ex10_untreated))
p <- ggplot(data= df_ex10_untreated, aes(x = `Substrate concentration (ppm)`, y = `Rate (counts/min)`)) +
geom_point() +
labs(title="Velocity of Galactosyltransferase")
p
p <- ggplot(data= df_ex10, aes(x = `Substrate concentration (ppm)`, y = `Rate (counts/min)`)) +
geom_point(aes(color = `State`)) +
labs(title="Velocity of Galactosyltransferase")
p
df_ex1_summ <- df_ex1 %>%
group_by(Category) %>%
summarize("Mean Expression Value - stimulus" = round(mean(`Expression Value - stimulus`), 3),
"Mean Expression Value + stimulus" = round(mean(`Expression Value + stimulus`), 3))
formatted_table(head(df_ex1_summ))
tidy_df_ex11 <- df_ex1_summ %>%
pivot_longer(c(`Mean Expression Value - stimulus`, `Mean Expression Value + stimulus`), names_to = "Expression type", values_to = "Expression Value")
formatted_table(head(tidy_df_ex11))
p <- ggplot(data = tidy_df_ex11, aes(x = `Category`, y = `Expression Value`, fill = `Expression type`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Mean Expression Value per Category") +
coord_cartesian(ylim=c(0.45,0.53)) + # limits of the y-axis were adjusted to compare to the Excel exercise
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
